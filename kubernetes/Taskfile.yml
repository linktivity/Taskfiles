version: "3"

includes:
  docker: https://storage.googleapis.com/bucket-linktivity-misc/DevOps/Taskfiles/master/docker/Taskfile.yml

vars:
  TIMEZONE: Asia/Tokyo
  TIMESTAMP:
    sh: git show -s --format=%cI $(git rev-parse --short HEAD)
  GIT_TIMESTAMP: '{{ dateInZone "20060102" (mustToDate "2006-01-02T15:04:05-07:00" .TIMESTAMP) .TIMEZONE }}'
  GIT_VERSION:
    sh: git describe --exact-match --tags $(git rev-parse --short HEAD) 2>/dev/null || git rev-parse --short HEAD
  GIT_CHANGES:
    sh: git status . --porcelain
  DIST:
    sh: echo $(pwd)/dist

  # deployment variables
  PROJECT:
    sh: basename $(pwd)
  KUBECLUSTER_PROJECTID:
    sh: echo {{ .KUBECONTEXT }} | cut -d '_' -f 2
  KUBECLUSTER_ZONE:
    sh: echo {{ .KUBECONTEXT }} | cut -d '_' -f 3
  KUBECLUSTER_CLUSTERNAME:
    sh: echo {{ .KUBECONTEXT }} | cut -d '_' -f 4
  HELM_CHART: oci://asia-northeast1-docker.pkg.dev/lkty-core-s-dev/charts/common-service
  HELM_CHART_VERSION: '{{ .HELM_CHART_VERSION | default "0.1.4" }}'

tasks:
  debug:
    desc: Check if the environment is ready for deployment.
    cmds:
      - echo "Checking environment readiness..."
      - echo "Environment {{ .ENV }}"
      - echo "Kube Cluster {{ .KUBECONTEXT }}"
      - echo "Target {{ .TARGET }}"
      - echo "Timestamp {{ .GIT_TIMESTAMP }}"
      - echo "Version {{ .GIT_VERSION }}"
      - echo "Changes {{ .GIT_CHANGES }}"
      - echo "Helm Chart {{ .HELM_CHART }}"
      - echo "Helm Chart Version {{ .HELM_CHART_VERSION }}"
      - echo "Dist {{ .DIST }}"
    silent: true

  cluster:prepare:
    desc: Connect to the Kubernetes cluster.
    cmds:
      - gcloud --quiet container clusters get-credentials {{ .KUBECLUSTER_CLUSTERNAME }} --zone {{ .KUBECLUSTER_ZONE }} --project {{ .KUBECLUSTER_PROJECTID }} > /dev/null 2>&1
    silent: true
    internal: true

  list:
    desc: List the services ready for deployment.
    cmds:
      - ls -d1 deploy/{{ .TARGET }}/{{ .ENV }}/*/ | xargs -n 1 basename | tr '\n' ' ' | sed 's/ $//'
    silent: true

  deploy:
    desc: Deploy service(s) to designated environment.
    deps:
      - task: deploy:check
    cmds:
      - task: docker:build
        vars:
          DOCKER_FILE: ./Dockerfile
      - task: deploy:prepare
      - task: deploy:loop
        vars:
          SERVICES:
            sh: |
              svc=`echo {{ .SVC }} | xargs`
              if [ "$svc" = "@all" ]; then 
                task list ENV={{ .ENV }} TARGET={{ .TARGET }}
              else
                echo -n "$svc"
              fi
    silent: true

  deploy:check:
    desc: Check before deployment.
    cmds:
      # check if .SVC is valid
      - |
        if [ -z "{{ .SVC }}" ]; then 
          echo "No services to deploy. Available services are:"
          task list ENV={{.ENV}} TARGET={{.TARGET}}
          echo ""
          exit 1
        elif [ "{{ .SVC }}" != "@all" ]; then
          for svc in {{ .SVC }}; do
            if [ ! -d "deploy/{{ .TARGET }}/{{ .ENV }}/$svc" ]; then
              echo "Service $svc does not exist."
              echo "Available services are:"
              task list ENV={{.ENV}} TARGET={{.TARGET}}
              echo ""
              exit 1
            fi
          done
        fi

    silent: true
    internal: true

  deploy:prepare:
    desc: Prepare the environment for deployment.
    cmds:
      - echo -n "Preparing environment for deployment..."
      - task: cluster:prepare
      - task: helm:install:prepare
      - echo "done."
    silent: true
    internal: true

  deploy:loop:
    desc: Start the deployment for each service.
    deps:
      # setting up IAM workload identity
      - task: iam:workloadIdentity
      - for: { var: SERVICES, split: " " }
        task: helm:install:single
        vars:
          SERVICE: "{{ .ITEM }}"
    cmds:
      - echo "----------"
      - echo "Service(s) [{{ .SERVICES }}] deployed successfully to {{ .ENV }} environment in {{ .KUBECLUSTER_CLUSTERNAME }} cluster."
      - task: clean
    silent: true
    internal: true

  iam:workloadIdentity:
    desc: Set up IAM workload identity for the service account if not already set up.
    cmds:
      - |
        gcloud iam service-accounts add-iam-policy-binding \
        basic-sa@{{ .KUBECLUSTER_PROJECTID }}.iam.gserviceaccount.com \
        --project={{ .KUBECLUSTER_PROJECTID }} \
        --member="serviceAccount:{{ .KUBECLUSTER_PROJECTID }}.svc.id.goog[{{ .ENV }}/basic-sa]" \
        --role="roles/iam.workloadIdentityUser" \
        --quiet \
        > /dev/null 2>&1
    silent: true
    internal: true

  helm:install:prepare:
    desc: Prepare the environment for deployment.
    cmds:
      - |
        helm template components \
        --namespace {{ .ENV }} \
        --set-file commonConfig=deploy/{{ .TARGET }}/{{ .ENV }}/common.yaml \
        --set project={{ .PROJECT }} \
        --set projectPrefix={{ .TARGET }} \
        --set serviceAccount.create=true \
        --set serviceAccount.annotations."iam\.gke\.io/gcp-service-account"="basic-sa@{{ .KUBECLUSTER_PROJECTID }}.iam.gserviceaccount.com" \
        --values ./deploy/{{ .TARGET }}/{{ .ENV }}/values.yaml \
        {{ .HELM_CHART }} --version {{ .HELM_CHART_VERSION }} \
        --output-dir ./dist > /dev/null
      - kubectl create namespace {{ .ENV }} --context={{ .KUBECONTEXT }} --dry-run=client -o yaml | kubectl apply -f - --context={{ .KUBECONTEXT }} > /dev/null
      # enable istio injection
      - kubectl label namespace {{ .ENV }} istio-injection=enabled --context={{ .KUBECONTEXT }} > /dev/null
      - kubectl apply -f ./dist/common-service/templates/ns-shared/ --context={{ .KUBECONTEXT }} -n {{ .ENV }} > /dev/null
    silent: true
    internal: true

  helm:install:single:
    desc: Deploy a service in full according to the parameters in values.
    cmds:
      - echo "Deploying {{ .SERVICE }}..."
      - |
        helm upgrade --install {{ .SERVICE }} \
        --kube-context {{ .KUBECONTEXT }} \
        --namespace {{ .ENV }} \
        --set-file serviceConfig=deploy/{{ .TARGET }}/{{ .ENV }}/{{ .SERVICE }}/config.yaml \
        --set image.repository={{ .IMAGE_REPO }} \
        --set image.tag={{ .IMAGE_TAG }} \
        --set project={{ .PROJECT }} \
        --set projectPrefix={{ .TARGET }} \
        --values ./deploy/{{ .TARGET }}/{{ .ENV }}/{{ .SERVICE }}/values.yaml \
        --wait --timeout 300s \
        --cleanup-on-fail \
        {{ .HELM_CHART }} --version {{ .HELM_CHART_VERSION }} \
        > /dev/null
    silent: true
    internal: true

  # helm:upgrade:single:
  #   desc: Updates only the image tag of the specified service, not the rest of the configuration.

  diff:
    desc: Compare the differences between the current service versions and the deployed versions.
    cmds:
      - task: diff:loop
        vars:
          SERVICES:
            sh: |
              svc=`echo {{ .SVC }} | xargs`
              if [ "$svc" = "@all" ]; then 
                task list ENV={{ .ENV }} TARGET={{ .TARGET }}
              else
                echo -n "$svc"
              fi
    silent: true

  diff:loop:
    desc: Start the comparison for each service.
    deps:
      - for: { var: SERVICES, split: " " }
        task: diff:single
        vars:
          SERVICE: "{{ .ITEM }}"
    silent: true
    internal: true

  diff:single:
    desc: Compare the difference for a single service.
    cmds:
      - |
        echo "Comparing {{ .SERVICE }} with the current deployed version..."
        helm diff upgrade --install {{ .SERVICE }} \
          --kube-context {{ .KUBECONTEXT }} \
          --namespace {{ .ENV }} \
          --set-file serviceConfig=deploy/{{ .TARGET }}/{{ .ENV }}/{{ .SERVICE }}/config.yaml \
          --set project={{ .PROJECT }} \
          --set projectPrefix={{ .TARGET }} \
          --set image.repository={{ .IMAGE_REPO }} \
          --set image.tag={{ .IMAGE_TAG }} \
          --values ./deploy/{{ .TARGET }}/{{ .ENV }}/{{ .SERVICE }}/values.yaml \
          {{ .HELM_CHART }} --version {{ .HELM_CHART_VERSION }}
    silent: true
    internal: true

  rollback:
    desc: Rollback to the previous versions.
    cmds:
      - task: rollback:loop
        vars:
          SERVICES:
            sh: |
              svc=`echo {{ .SVC }} | xargs`
              if [ "$svc" = "@all" ]; then 
                task list ENV={{ .ENV }} TARGET={{ .TARGET }}
              else
                echo -n "$svc"
              fi
    silent: true

  rollback:loop:
    desc: Rollback the services to the previous versions.
    deps:
      - for: { var: SERVICES, split: " " }
        task: rollback:single
        vars:
          SERVICE: "{{ .ITEM }}"
    silent: true
    internal: true

  rollback:single:
    desc: Rollback a single service to the previous version.
    cmds:
      - |
        echo "Rolling back {{ .SERVICE }} to the previous revision..."
        helm rollback {{ .SERVICE }} 0 --namespace {{ .ENV }} --kube-context {{ .KUBECONTEXT }}
    silent: true
    internal: true

  delete:all:
    desc: Delete all resources and helm releases in {{.ENV}} environment
    interactive: true
    cmds:
      - |
        echo "The following commands will be executed:"
        echo "1. helm list --namespace {{ .ENV }} --kube-context {{ .KUBECONTEXT }} -q | xargs -n 1 -I {} helm delete {} --namespace {{ .ENV }} --kube-context {{ .KUBECONTEXT }}"
        read -p "Do you want to execute all these commands? (y/n): " confirm && [ "$confirm" = "y" ] && {
          helm list --namespace {{ .ENV }} --kube-context {{ .KUBECONTEXT }} -q | xargs -n 1 -I {} helm delete {} --namespace {{ .ENV }} --kube-context {{ .KUBECONTEXT }}
        }
    silent: true

  clean:
    desc: Clean up temp files .
    cmds:
      - echo "Cleaning up temp files..."
      - rm -rf ./dist
      - echo "done."
    silent: true
